[alias]
    st = status -u
    co = checkout
    br = branch

    # dumps git log as oneliner to stdout
    lo = !git --no-pager log --oneline

    # fixup without signing to prevent merge of PRs
    fixup = commit --no-gpg-sign --fixup

    # get all files in a commit, defaults to HEAD
    files = "!f() { git diff-tree --no-commit-id --name-only -r ${1-HEAD}; }; f"

    # get all commit from HEAD to tracking branch HEAD or supplied branch
    one = "!f() { git --no-pager log --oneline ${1-$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')}..HEAD; }; f"

    # for dev staging branch
    dev = "!f() { git --no-pager log --oneline ${1-origin/dev}..HEAD; }; f"

    # generate git ignore file
    ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"

    # extract file from HEAD, usage git extract-file path/to/file
    ef = "!f() { \
        if [ -z "${1}" ]; then \
            >&2 echo "Missing file argument, extraction aborted!"; \
            echo; \
            exit 1; \
        fi; \
        git ls-files -m | grep "${1}" -q; \
        if [ "$?" -ne 1 ]; then \
            >&2 echo "File ${1} found unstaged or staged, extraction aborted!"; \
            echo; \
            exit 1; \
        fi; \
        git files | grep ${1} -q;\
        if [ "$?" -ne 0 ]; then \
            >&2 echo "File ${1} not found in HEAD commit, extraction aborted!"; \
            echo; \
            exit 1; \
        fi; \
        echo "Extracting file ${1}" && \
        git diff HEAD~1 -- ${1} > "${1}.diff" && \
        git checkout HEAD~1 -- ${1} && \
        git commit --amend --no-edit && \
        git apply --whitespace=nowarn ${1}.diff && \
        rm -f "${1}.diff"; \
    }; f"
